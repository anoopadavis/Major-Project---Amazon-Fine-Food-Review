# -*- coding: utf-8 -*-
"""Major Project Amazon Fine Food Review.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G9RiMqYZ4VXrZ4wO6kintFMvAxXZn-du
"""

import pandas as pd
import numpy as np
import nltk        
import matplotlib.pyplot as plt
df = pd.read_csv('https://media.githubusercontent.com/media/anoopadavis/Major-Project---Amazon-Fine-Food-Review/master/RDS.csv')
print(df)

df.drop(['Id' , 'ProductId' , 'UserId' , 'ProfileName' , 'HelpfulnessNumerator' , 'HelpfulnessDenominator' , 'Time' , 'Summary'] , axis = 1 , inplace = True)

df.head()

df.tail()

df.rename(columns= {"Score" : "Rating" , "Text" : "Review"}, inplace = True)
df.head()

# Bar graph
df.Rating.value_counts().plot(kind = "bar")
plt.title('Number of times a rating happens')
plt.xlabel('Rating Scale')
plt.ylabel('Total ratings')
plt.show()

df = df[df['Rating'] != 3]
len(df)

df['Sentiment'] = df['Rating'].apply(lambda Rating:("Positive" if Rating > 3 else "Negative"))
df.head()

df['Sentiment'].value_counts()

# Bar plot for positive and negative
df['Sentiment'].value_counts().plot(kind ="bar")
plt.title("Analysis")
plt.ylabel("frequency of each comment") 
plt.show()

#data is greatly imbalanced

length = df.Review.apply(len)
df = pd.concat([df , length] , axis = 1)
df.columns.values[3] = "Length"
df.head()

!pip install word

from nltk.corpus import stopwords
nltk.download('stopwords')
stopwords.words("english")

import string
string.punctuation

from wordcloud import WordCloud, STOPWORDS

stopwords = set(STOPWORDS)
def Mywordcloud(data, title = None):
  wordcloud = WordCloud(
      background_color = 'white',
      stopwords = stopwords,
      max_words = 500,
      max_font_size = 40,
      scale = 3,
      random_state = 1
  ).generate(str(data))

  fig = plt.figure(1, figsize = (20,20))
  plt.axis('off')
  if title:
    fig.suptitle(title, fontsize=40)
    fig.subplots_adjust(top=2.3)

  plt.imshow(wordcloud)
  plt.show()


Mywordcloud(df['Review'].dropna(), 'Total')

df_p = df[df.Sentiment == 'Positive']
df_n = df[df.Sentiment == 'Negative']

Mywordcloud(df_p['Review'].dropna(), 'Positive Reviews')
Mywordcloud(df_n['Review'].dropna(), 'Negative Reviews')

from sklearn.feature_extraction.text import CountVectorizer
bow_transformer =  CountVectorizer(analyzer = 'word').fit(df["Review"])

bow_transformer.vocabulary_

print(len(bow_transformer.vocabulary_))

# input and output
x=df.iloc[:,1].values
y=df.iloc[:,2].values
x.shape

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state = 0)

x_train.shape

x_test.shape

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer()
ctmTr = cv.fit_transform(x_train)
x_test_dtm = cv.transform(x_test)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
model = LogisticRegression()
model.fit(ctmTr, y_train)

y_pred = model.predict(x_test_dtm)
y_pred

y_test

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

accuracy_score(y_pred,y_test)*100

confusion_matrix(y_pred,y_test)

print(classification_report(y_pred,y_test))

y1 = cv.transform(['worst Food quality'])
y1 = model.predict(y1)
y1

!pip install streamlit

!pip install pyngrok

from pyngrok import ngrok
ngrok.connect(port='8501')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile ML_APP.py
# import streamlit as st
# from PIL import Image
# from sklearn.feature_extraction.text import CountVectorizer
# import pandas as pd
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
# df=pd.read_csv('/content/drive/My Drive/Colab Notebooks/Reviews (1).csv')
# df.drop(['Id','ProductId','UserId','ProfileName','Time','Text','HelpfulnessNumerator','HelpfulnessDenominator'],axis=1,inplace=True)
# df.dropna(axis=0,inplace=True)
# df['Sentiment']=df['Score'].apply(lambda Score: 'Positive' if Score>3 else('Negative' if Score<3 else "Neutral"))
# index=df[df['Sentiment']==0].index
# df.drop(index=index,axis=0,inplace=True)
# 
# x=df.iloc[:,1].values
# y=df.iloc[:,2].values
# x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)
# cv = CountVectorizer()
# x_train_tr = cv.fit_transform(x_train)
# x_test_tr= cv.transform(x_test)
# from sklearn.linear_model import LogisticRegression
# clf=LogisticRegression()
# clf.fit(x_train_tr,y_train)
# 
# 
# 
# 
# 
# st.title("SENTIMENT ANALYSIS")
# image=Image.open('/content/drive/My Drive/Colab Notebooks/IMG-20200904-WA0251.jpg')
# st.image(image,width=800)
# review = st.text_input('Enter your short review :')
# df= {'review':review}
# df=pd.DataFrame(df,index=[0])
# to_pred=df.iloc[:,0]
# result=clf.predict(cv.transform(to_pred))
# if(st.button('Predict')):
#     st.write(result[0])

!streamlit run ML_APP.py